apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 2
def versionStage = "pre-a"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "app3cm.mg2"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "MG2-v$versionName-$versionStage"
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            versionNameSuffix "-T"
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "-R"
            resValue "string", "app_version", "${defaultConfig.versionName}"
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', '../../i18n']
        }
    }
    aaptOptions {
        ignoreAssetsPattern 'lib'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // generic libraries
    implementation 'com.i18next:i18next-android:1.0.0'

    // Firebase Authentication
    implementation 'com.google.firebase:firebase-auth:19.3.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    // Google Pay integration via Stripe
    implementation 'com.stripe:stripe-android:14.1.0'
    implementation 'com.google.android.gms:play-services-wallet:18.0.0'

    // OkHttp & GSON
    implementation 'com.squareup.okhttp3:okhttp:4.4.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    // Google Play Billing
    implementation 'com.android.billingclient:billing:2.1.0'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
//def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystorePropertiesFile
if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    keystorePropertiesFile = file("D:/git/keystore.properties")
} else {
    keystorePropertiesFile = file("/data/drone/.android/keystore.properties")
}

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

def keyFileName
if (keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        keyFileName = 'KEYSTORE_FILE_WINDOWS'
    } else {
        keyFileName = 'KEYSTORE_FILE_LINUX'
    }

    def keystoreFile = file(keystoreProperties[keyFileName])
    if (keystoreProperties != null && keystoreFile.exists() &&
            keystoreProperties.containsKey(keyFileName) &&
            keystoreProperties.containsKey('KEYSTORE_PASSWORD') &&
            keystoreProperties.containsKey('KEY_ALIAS') &&
            keystoreProperties.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(keystoreProperties[keyFileName])
        android.signingConfigs.release.storePassword = keystoreProperties['KEYSTORE_PASSWORD']
        android.signingConfigs.release.keyAlias = keystoreProperties['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = keystoreProperties['KEY_PASSWORD']
    } else if (!keystoreFile.exists()) {
        println 'invalid path for keystore file'
    } else {
        println 'keystore.properties found but some entries are missing or invalid'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'keystore.properties not found'
    android.buildTypes.release.signingConfig = null
}
